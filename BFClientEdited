#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/tcp.h>  // Include for TCP_NODELAY
#include <sys/socket.h>   // Include for setsockopt

#define PORT 8080

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[1024] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IP addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    // Disable Nagle's algorithm by setting TCP_NODELAY option
    int flag = 1;
    if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, &flag, sizeof(int)) < 0) {
        perror("setsockopt TCP_NODELAY failed");
        return -1;
    }

    // Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    printf("You have successfully connected to the Library Server!\n");
    printf("------------------------------------------------------\n");
    fflush(stdout); // Flush the stdout buffer immediately after printing

   while (1) {
    memset(buffer, 0, sizeof(buffer)); // Clear the buffer for each new message

    // Loop to handle partial reads
    ssize_t total_bytes = 0;
    ssize_t bytes_read;
    while ((bytes_read = read(sock, buffer + total_bytes, sizeof(buffer) - total_bytes - 1)) > 0) {
        total_bytes += bytes_read;

        // Check for a complete message (assuming '\n' is the delimiter)
        if (buffer[total_bytes - 1] == '\n') {
            break;
        }

        // Prevent buffer overflow
        if (total_bytes >= sizeof(buffer) - 1) {
            break;
        }
    }

    if (bytes_read <= 0) {
        printf("Disconnected from server.\n");
        break;
    }

    buffer[total_bytes] = '\0'; // Null-terminate the received string
    printf("%s", buffer);      // Print the received message
    fflush(stdout);

    // Get user input
    fgets(buffer, sizeof(buffer), stdin);
    buffer[strcspn(buffer, "\n")] = '\0'; // Remove newline character

    // Send input to the server
    write(sock, buffer, strlen(buffer));

    // Check for exit conditions
    if (strcmp(buffer, "5") == 0) {
        printf("Exiting...\n");
        fflush(stdout);
        break;
    }
}


    close(sock);
    return 0;
}
